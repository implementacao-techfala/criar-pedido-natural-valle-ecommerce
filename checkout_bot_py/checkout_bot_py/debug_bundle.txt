# DEBUG BUNDLE gerado em 2025-04-16 03:25:18.874279
# Cont√©m apenas arquivos relevantes para revis√£o.


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/.env.example
================================================================================
CHECKOUT_URL=https://naturalvalle.com.br/finalizar-compra/
ACTION_TIMEOUT_MS=15000

================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/app.py
================================================================================
import sys, asyncio
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import os, random, time, logging, pathlib
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from playwright.async_api import async_playwright
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LOGS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LOG_DIR = pathlib.Path(__file__).with_name("logs")
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_DIR / "checkout_bot.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
CHECKOUT_URL      = os.getenv("CHECKOUT_URL", "https://naturalvalle.com.br/checkout/")
ACTION_TIMEOUT_MS = int(os.getenv("ACTION_TIMEOUT_MS", "15000"))
INSTANCE_NAME     = os.getenv("INSTANCE_NAME", "instancia-padrao")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MODELOS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class CheckoutInfo(BaseModel):
    email: str
    first_name: str
    last_name: str
    cpf: str
    cep: str
    address_1: str
    number: str
    address_2: str | None = ""
    neighborhood: str
    city: str
    state: str = Field(..., min_length=2, max_length=2)
    phone: str

class Payload(BaseModel):
    produtos: list[str]
    checkout: CheckoutInfo

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FASTAPI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = FastAPI(title="Checkout‚ÄëBot Python")

async def human_delay(a=0.3, b=0.8):
    await asyncio.sleep(random.uniform(a, b))

def normalize_qty(q: str) -> str:
    return f"{float(q.replace(',', '.')):.2f}"

async def process_request(data: Payload):
    async with async_playwright() as p:
        logger.info("üü¢ Iniciando processo para inst√¢ncia: %s", INSTANCE_NAME)

        browser = await p.chromium.launch(headless=False, slow_mo=300)
        context = await browser.new_context()
        page = await context.new_page()
        page.set_default_timeout(ACTION_TIMEOUT_MS)

        result = {"items": [], "checkout": "pending"}

        try:
            for linha in data.produtos:
                try:
                    url, qty_raw = linha.rsplit(':', 1)
                except ValueError:
                    logger.warning("‚ùó Formato inv√°lido na linha: %s", linha)
                    continue

                qty = normalize_qty(qty_raw)
                logger.info("‚û°Ô∏è Abrindo %s (qty=%s)", url, qty)

                try:
                    await page.goto(url)
                    logger.info("üåê P√°gina carregada")
                except Exception as e:
                    logger.error("‚ùå Falha ao carregar p√°gina %s: %s", url, e)
                    continue

                try:
                    await page.fill("input.qty", qty)
                    await human_delay()
                    async with page.expect_response(lambda r: "wc-ajax" in r.url and r.status == 200):
                        await page.click('button[name="add-to-cart"]')
                    logger.info("‚úÖ Produto adicionado ao carrinho: %s", url)
                    result["items"].append({"url": url, "qty": qty, "added": True})
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Falha ao adicionar produto: %s ‚Äî %s", url, e)
                    html = await page.content()
                    if "n√£o pode adicionar a quantidade" in html:
                        logger.warning("üö´ Produto sem estoque: %s", url)
                    result["items"].append({"url": url, "qty": qty, "added": False})
                    continue

                await human_delay(0.5, 1.2)

            logger.info("üõí Indo para o checkout: %s", CHECKOUT_URL)
            try:
                await page.goto(CHECKOUT_URL)
            except Exception as e:
                logger.error("‚ùå Falha ao acessar p√°gina de checkout: %s", e)
                raise

            c = data.checkout
            mapping = {
                "billing_email": c.email,
                "billing_first_name": c.first_name,
                "billing_last_name": c.last_name,
                "billing_cpf": c.cpf,
                "billing_postcode": c.cep,
                "billing_address_1": c.address_1,
                "billing_number": c.number,
                "billing_address_2": c.address_2 or "",
                "billing_neighborhood": c.neighborhood,
                "billing_city": c.city,
                "billing_phone": c.phone,
            }

            for field, value in mapping.items():
                try:
                    await page.fill(f"#{field}", value)
                    logger.info("‚úçÔ∏è Preenchido: %s", field)
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Erro ao preencher %s: %s", field, e)
                await human_delay(0.2, 0.6)

            try:
                await page.click("#select2-billing_state-container")
                await page.fill(".select2-search__field", c.state)
                await page.keyboard.press("Enter")
                logger.info("üó∫Ô∏è Estado selecionado: %s", c.state)
            except Exception as e:
                logger.warning("‚ö†Ô∏è Falha ao selecionar estado: %s", e)

            result["checkout"] = "filled"
            logger.info("‚úÖ Checkout preenchido com sucesso!")

        except Exception as e:
            logger.exception("‚ùå Erro geral durante o processo")
            raise

        finally:
            await context.close()
            await browser.close()
            logger.info("üîí Navegador fechado")

        return result

@app.post("/checkout")
async def checkout_endpoint(payload: Payload):
    t0 = time.time()
    try:
        result = await process_request(payload)
        result.update(status="success", duration_ms=int((time.time() - t0) * 1000))
        logger.info("‚úî Pedido conclu√≠do em %sms", result["duration_ms"])
        return result
    except Exception as e:
        logger.error("‚úñ Falha geral: %s", e, exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/checkout_bot_py/.env.example
================================================================================
CHECKOUT_URL=https://naturalvalle.com.br/finalizar-compra/
ACTION_TIMEOUT_MS=15000

================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/checkout_bot_py/Dockerfile
================================================================================
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt &&     playwright install --with-deps chromium
COPY . .
ENV PYTHONUNBUFFERED=1
CMD ["uvicorn","app:app","--host","0.0.0.0","--port","8000"]

================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/checkout_bot_py/README.md
================================================================================
# checkout_bot_py

API em **Python + FastAPI + Playwright** que adiciona produtos WooCommerce ao carrinho
e preenche o checkout.

```bash
# instala√ß√£o local
python -m venv .venv && source .venv/bin/activate   # Windows: .venv\Scripts\activate
pip install -r requirements.txt
playwright install chromium
uvicorn app:app --reload
```

Endpoint:

```http
POST /checkout
{
  "produtos": ["<url>:0,05", "..."],
  "checkout": { "email":"...", "first_name":"...", ... }
}
```


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/checkout_bot_py/requirements.txt
================================================================================
fastapi==0.111.0
uvicorn[standard]==0.29.0
python-dotenv==1.0.1
playwright==1.44.0
pydantic==2.7.1

================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/concat_debug.py
================================================================================
"""
concat_debug.py
----------------
Rode:  python concat_debug.py

Cria (ou sobrescreve) debug_bundle.txt contendo o conte√∫do
dos arquivos relevantes do projeto.
"""

import pathlib
import datetime

# 1. Configura√ß√µes -----------------------------------------------

# extens√µes/nomes que queremos salvar
KEEP_EXT  = {".py", ".txt", ".md", ".env", ".toml", ".yaml", ".yml"}
KEEP_FILE = {"Dockerfile", "requirements.txt", ".env.example"}

# pastas que N√ÉO queremos percorrer
SKIP_DIR  = {".venv", "Lib", "Include", "Scripts",
             "__pycache__", ".git", "node_modules", "dist", "build"}

# arquivo de sa√≠da
OUT_FILE = pathlib.Path("debug_bundle.txt")

# 2. Fun√ß√µes utilit√°rias ------------------------------------------

def should_keep(path: pathlib.Path) -> bool:
    """Decide se o arquivo ser√° inclu√≠do na concatena√ß√£o."""
    if any(part in SKIP_DIR for part in path.parts):
        return False
    if path.name in KEEP_FILE:
        return True
    return path.suffix.lower() in KEEP_EXT

def banner(path: pathlib.Path) -> str:
    """Cria um cabe√ßalho bonitinho para cada arquivo no txt."""
    line = "=" * 80
    return f"\n{line}\n# {path.as_posix()}\n{line}\n"

# 3. Percorre e concatena -----------------------------------------

def main():
    base = pathlib.Path(__file__).resolve().parent
    files = sorted(p for p in base.rglob("*") if p.is_file() and should_keep(p))

    with OUT_FILE.open("w", encoding="utf-8") as out:
        out.write(f"# DEBUG BUNDLE gerado em {datetime.datetime.now()}\n")
        out.write("# Cont√©m apenas arquivos relevantes para revis√£o.\n\n")

        for f in files:
            try:
                out.write(banner(f))
                out.write(f.read_text(encoding="utf-8", errors="ignore"))
                out.write("\n")  # garante quebra de linha final
            except Exception as e:
                print(f"[WARN] N√£o consegui ler {f}: {e}")

    print(f"‚úÖ  Arquivo criado: {OUT_FILE} ({OUT_FILE.stat().st_size/1024:.1f}‚ÄØKB)")

# -----------------------------------------------------------------
if __name__ == "__main__":
    main()


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/debug_bundle.txt
================================================================================
# DEBUG BUNDLE gerado em 2025-04-16 03:25:18.874279
# Cont√©m apenas arquivos relevantes para revis√£o.


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/.env.example
================================================================================
CHECKOUT_URL=https://naturalvalle.com.br/finalizar-compra/
ACTION_TIMEOUT_MS=15000

================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/app.py
================================================================================
import sys, asyncio
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import os, random, time, logging, pathlib
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from playwright.async_api import async_playwright
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ LOGS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LOG_DIR = pathlib.Path(__file__).with_name("logs")
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(LOG_DIR / "checkout_bot.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
CHECKOUT_URL      = os.getenv("CHECKOUT_URL", "https://naturalvalle.com.br/checkout/")
ACTION_TIMEOUT_MS = int(os.getenv("ACTION_TIMEOUT_MS", "15000"))
INSTANCE_NAME     = os.getenv("INSTANCE_NAME", "instancia-padrao")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MODELOS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class CheckoutInfo(BaseModel):
    email: str
    first_name: str
    last_name: str
    cpf: str
    cep: str
    address_1: str
    number: str
    address_2: str | None = ""
    neighborhood: str
    city: str
    state: str = Field(..., min_length=2, max_length=2)
    phone: str

class Payload(BaseModel):
    produtos: list[str]
    checkout: CheckoutInfo

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FASTAPI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = FastAPI(title="Checkout‚ÄëBot Python")

async def human_delay(a=0.3, b=0.8):
    await asyncio.sleep(random.uniform(a, b))

def normalize_qty(q: str) -> str:
    return f"{float(q.replace(',', '.')):.2f}"

async def process_request(data: Payload):
    async with async_playwright() as p:
        logger.info("üü¢ Iniciando processo para inst√¢ncia: %s", INSTANCE_NAME)

        browser = await p.chromium.launch(headless=False, slow_mo=300)
        context = await browser.new_context()
        page = await context.new_page()
        page.set_default_timeout(ACTION_TIMEOUT_MS)

        result = {"items": [], "checkout": "pending"}

        try:
            for linha in data.produtos:
                try:
                    url, qty_raw = linha.rsplit(':', 1)
                except ValueError:
                    logger.warning("‚ùó Formato inv√°lido na linha: %s", linha)
                    continue

                qty = normalize_qty(qty_raw)
                logger.info("‚û°Ô∏è Abrindo %s (qty=%s)", url, qty)

                try:
                    await page.goto(url)
                    logger.info("üåê P√°gina carregada")
                except Exception as e:
                    logger.error("‚ùå Falha ao carregar p√°gina %s: %s", url, e)
                    continue

                try:
                    await page.fill("input.qty", qty)
                    await human_delay()
                    async with page.expect_response(lambda r: "wc-ajax" in r.url and r.status == 200):
                        await page.click('button[name="add-to-cart"]')
                    logger.info("‚úÖ Produto adicionado ao carrinho: %s", url)
                    result["items"].append({"url": url, "qty": qty, "added": True})
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Falha ao adicionar produto: %s ‚Äî %s", url, e)
                    html = await page.content()
                    if "n√£o pode adicionar a quantidade" in html:
                        logger.warning("üö´ Produto sem estoque: %s", url)
                    result["items"].append({"url": url, "qty": qty, "added": False})
                    continue

                await human_delay(0.5, 1.2)

            logger.info("üõí Indo para o checkout: %s", CHECKOUT_URL)
            try:
                await page.goto(CHECKOUT_URL)
            except Exception as e:
                logger.error("‚ùå Falha ao acessar p√°gina de checkout: %s", e)
                raise

            c = data.checkout
            mapping = {
                "billing_email": c.email,
                "billing_first_name": c.first_name,
                "billing_last_name": c.last_name,
                "billing_cpf": c.cpf,
                "billing_postcode": c.cep,
                "billing_address_1": c.address_1,
                "billing_number": c.number,
                "billing_address_2": c.address_2 or "",
                "billing_neighborhood": c.neighborhood,
                "billing_city": c.city,
                "billing_phone": c.phone,
            }

            for field, value in mapping.items():
                try:
                    await page.fill(f"#{field}", value)
                    logger.info("‚úçÔ∏è Preenchido: %s", field)
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Erro ao preencher %s: %s", field, e)
                await human_delay(0.2, 0.6)

            try:
                await page.click("#select2-billing_state-container")
                await page.fill(".select2-search__field", c.state)
                await page.keyboard.press("Enter")
                logger.info("üó∫Ô∏è Estado selecionado: %s", c.state)
            except Exception as e:
                logger.warning("‚ö†Ô∏è Falha ao selecionar estado: %s", e)

            result["checkout"] = "filled"
            logger.info("‚úÖ Checkout preenchido com sucesso!")

        except Exception as e:
            logger.exception("‚ùå Erro geral durante o processo")
            raise

        finally:
            await context.close()
            await browser.close()
            logger.info("üîí Navegador fechado")

        return result

@app.post("/checkout")
async def checkout_endpoint(payload: Payload):
    t0 = time.time()
    try:
        result = await process_request(payload)
        result.update(status="success", duration_ms=int((time.time() - t0) * 1000))
        logger.info("‚úî Pedido conclu√≠do em %sms", result["duration_ms"])
        return result
    except Exception as e:
        logger.error("‚úñ Falha geral: %s", e, exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/checkout_bot_py/.env.example
================================================================================
CHECKOUT_URL=https://naturalvalle.com.br/finalizar-compra/
ACTION_TIMEOUT_MS=15000

================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/checkout_bot_py/Dockerfile
================================================================================
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt &&     playwright install --with-deps chromium
COPY . .
ENV PYTHONUNBUFFERED=1
CMD ["uvicorn","app:app","--host","0.0.0.0","--port","8000"]

================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/checkout_bot_py/README.md
================================================================================
# checkout_bot_py

API em **Python + FastAPI + Playwright** que adiciona produtos WooCommerce ao carrinho
e preenche o checkout.

```bash
# instala√ß√£o local
python -m venv .venv && source .venv/bin/activate   # Windows: .venv\Scripts\activate
pip install -r requirements.txt
playwright install chromium
uvicorn app:app --reload
```

Endpoint:

```http
POST /checkout
{
  "produtos": ["<url>:0,05", "..."],
  "checkout": { "email":"...", "first_name":"...", ... }
}
```


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/Dockerfile
================================================================================
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt &&     playwright install --with-deps chromium
COPY . .
ENV PYTHONUNBUFFERED=1
CMD ["uvicorn","app:app","--host","0.0.0.0","--port","8000"]

================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/generate_checkout_bot.py
================================================================================
#!/usr/bin/env python3
"""
Gera o projeto 'checkout_bot_py' completo:
  checkout_bot_py/
  ‚îú app.py
  ‚îú requirements.txt
  ‚îú .env.example
  ‚îú Dockerfile
  ‚îî README.md

Depois instala depend√™ncias e baixa o Chromium.
Execute com:  python generate_checkout_bot.py
"""

import os, subprocess, sys, textwrap, venv, pathlib, shutil

APP_DIR = "checkout_bot_py"

FILES = {
    "app.py": r'''
import os, asyncio, random, time
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from playwright.async_api import async_playwright
from dotenv import load_dotenv

load_dotenv()

CHECKOUT_URL      = os.getenv("CHECKOUT_URL", "https://naturalvalle.com.br/finalizar-compra/")
ACTION_TIMEOUT_MS = int(os.getenv("ACTION_TIMEOUT_MS", "15000"))

# ---------- Modelos ----------
class CheckoutInfo(BaseModel):
    email: str
    first_name: str
    last_name: str
    cpf: str
    cep: str
    address_1: str
    number: str
    address_2: str | None = ""
    neighborhood: str
    city: str
    state: str = Field(..., min_length=2, max_length=2)
    phone: str

class Payload(BaseModel):
    produtos: list[str]
    checkout: CheckoutInfo

# ---------- FastAPI ----------
app = FastAPI(title="Checkout‚ÄëBot Python")

async def human_delay(a=0.3, b=0.8):
    await asyncio.sleep(random.uniform(a, b))

def normalize_qty(q: str) -> str:
    return f"{float(q.replace(',', '.')):.2f}"

async def process_request(data: Payload):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True, args=["--no-sandbox"])
        context = await browser.new_context()
        page    = await context.new_page()
        page.set_default_timeout(ACTION_TIMEOUT_MS)

        result = {"items": [], "checkout": "pending"}
        try:
            # --- produtos ---
            for linha in data.produtos:
                url, qty_raw = linha.split(':')
                qty = normalize_qty(qty_raw)
                await page.goto(url)
                await page.fill("input.qty", qty)
                await human_delay()
                await asyncio.gather(
                    page.wait_for_response(lambda r: "wc-ajax" in r.url and r.status == 200),
                    page.click('button[name="add-to-cart"]')
                )
                result["items"].append({"url": url, "qty": qty, "added": True})
                await human_delay(0.5, 1.2)

            # --- checkout ---
            await page.goto(CHECKOUT_URL)
            c = data.checkout
            mapping = {
                "billing_email": c.email,
                "billing_first_name": c.first_name,
                "billing_last_name": c.last_name,
                "billing_cpf": c.cpf,
                "billing_postcode": c.cep,
                "billing_address_1": c.address_1,
                "billing_number": c.number,
                "billing_address_2": c.address_2 or "",
                "billing_neighborhood": c.neighborhood,
                "billing_city": c.city,
                "billing_phone": c.phone,
            }
            for field, value in mapping.items():
                await page.fill(f"#{field}", value)
                await human_delay(0.2, 0.6)

            # estado (select2)
            await page.click("#select2-billing_state-container")
            await page.fill(".select2-search__field", c.state)
            await page.keyboard.press("Enter")

            result["checkout"] = "filled"
        finally:
            await context.close()
            await browser.close()
        return result

@app.post("/checkout")
async def checkout_endpoint(payload: Payload):
    t0 = time.time()
    try:
        result = await process_request(payload)
        result.update(status="success", duration_ms=int((time.time()-t0)*1000))
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
''',

    "requirements.txt": '''
fastapi==0.111.0
uvicorn[standard]==0.29.0
python-dotenv==1.0.1
playwright==1.44.0
pydantic==2.7.1
    '''.strip(),

    ".env.example": '''
CHECKOUT_URL=https://naturalvalle.com.br/finalizar-compra/
ACTION_TIMEOUT_MS=15000
    '''.strip(),

    "Dockerfile": '''
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt && \
    playwright install --with-deps chromium
COPY . .
ENV PYTHONUNBUFFERED=1
CMD ["uvicorn","app:app","--host","0.0.0.0","--port","8000"]
    '''.strip(),

    "README.md": textwrap.dedent('''
        # checkout_bot_py

        API em **Python + FastAPI + Playwright** que adiciona produtos WooCommerce ao carrinho
        e preenche o checkout.

        ```bash
        # instala√ß√£o local
        python -m venv .venv && source .venv/bin/activate   # Windows: .venv\\Scripts\\activate
        pip install -r requirements.txt
        playwright install chromium
        uvicorn app:app --reload
        ```

        Endpoint:

        ```http
        POST /checkout
        {
          "produtos": ["<url>:0,05", "..."],
          "checkout": { "email":"...", "first_name":"...", ... }
        }
        ```
    ''')
}

def write_files():
    os.makedirs(APP_DIR, exist_ok=True)
    for name, content in FILES.items():
        path = pathlib.Path(APP_DIR) / name
        with open(path, "w", encoding="utf-8") as f:
            f.write(content.lstrip("\n"))
    print("üìÑ Arquivos criados.")

def create_venv_and_install():
    venv_dir = pathlib.Path(APP_DIR) / ".venv"
    print("üêç Criando venv‚Ä¶")
    venv.EnvBuilder(with_pip=True).create(venv_dir)
    python_bin = venv_dir / ("Scripts\\python.exe" if os.name == "nt" else "bin/python")
    pip = [str(python_bin), "-m", "pip"]
    subprocess.check_call(pip + ["install", "--upgrade", "pip"])
    subprocess.check_call(pip + ["install", "-r", "requirements.txt"], cwd=APP_DIR)
    subprocess.check_call([str(python_bin), "-m", "playwright", "install", "chromium"])
    print("‚úÖ Depend√™ncias instaladas.")
    activate = venv_dir / ("Scripts\\activate" if os.name == "nt" else "bin/activate")
    print(f"\nüëâ Para iniciar:\n  cd {APP_DIR}\n  source {activate}\n  uvicorn app:app --reload\n")

def main():
    if os.path.exists(APP_DIR):
        resp = input(f"Diret√≥rio '{APP_DIR}' j√° existe. Sobrescrever? (s/N) ").lower()
        if resp != 's':
            print("Abortado.")
            sys.exit(0)
        shutil.rmtree(APP_DIR)
    write_files()
    create_venv_and_install()

if __name__ == "__main__":
    main()


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/README.md
================================================================================
# checkout_bot_py

API em **Python + FastAPI + Playwright** que adiciona produtos WooCommerce ao carrinho
e preenche o checkout.

```bash
# instala√ß√£o local
python -m venv .venv && source .venv/bin/activate   # Windows: .venv\Scripts\activate
pip install -r requirements.txt
playwright install chromium
uvicorn app:app --reload
```

Endpoint:

```http
POST /checkout
{
  "produtos": ["<url>:0,05", "..."],
  "checkout": { "email":"...", "first_name":"...", ... }
}
```


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/requirements.txt
================================================================================
fastapi==0.111.0
uvicorn==0.29.0
python-dotenv==1.0.1
playwright==1.44.0
pydantic==2.7.1


================================================================================
# C:/Users/victo/OneDrive/Imagens/Criar pedido natural/checkout_bot_py/run.py
================================================================================
# run.py ‚îÄ inicia a API garantindo SelectorEventLoopPolicy
import asyncio, os, uvicorn

def main():
    if os.name == "nt":                               # ‚Üê Windows
        asyncio.set_event_loop_policy(
            asyncio.WindowsSelectorEventLoopPolicy()  # ‚Üê AQUI!
        )

    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=8000,
        reload=True,          # hot‚Äëreload em dev
    )

# prote√ß√£o obrigat√≥ria para multiprocessing no Windows
if __name__ == "__main__":
    main()

